<?php

defined('BASEPATH') or exit('No direct script access allowed');
require APPPATH . 'libraries/REST_Controller.php';

class Pricecategory_ctl extends REST_Controller
{

    public function __construct()
    {
        // Construct the parent class
        parent::__construct();

        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['pricecategory_get']['limit'] = 500; // 500 requests per hour per user/key
        $this->methods['pricecategory_post']['limit'] = 100; // 100 requests per hour per user/key
        $this->methods['pricecategory_delete']['limit'] = 50; // 50 requests per hour per user/key
        $this->load->model('Pricecategory_mdl');
    }
    public function pricecategorydel_get()
    {
        $PriceCategoryId = $this->get('PriceCategoryId');
        $PriceCategoryId = isset($PriceCategoryId) ? $PriceCategoryId : 0;
        if ($PriceCategoryId > 0) {
            $test = $this->Pricecategory_mdl->get_pricecategory($PriceCategoryId);
            if (!empty($test[0]['PriceCategoryId'])) {
                $this->Pricecategory_mdl->delete_pricecategory($PriceCategoryId);
                $message = [
                    'PriceCategoryId' => $PriceCategoryId,
                    'message' => 'Deleted the resource',
                ];
                $this->set_response($message, REST_Controller::HTTP_OK);
            } else {
                $message = [
                    'PriceCategoryId' => $PriceCategoryId,
                    'message' => 'This ID is not exists',
                ];
                $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
            }
        }

    }

    public function pricecategory_get()
    {
        $PriceCategoryId = $this->get('PriceCategoryId');
        $PriceCategoryId = isset($PriceCategoryId) ? $PriceCategoryId : 0;
        $pricecategory = $this->Pricecategory_mdl->get_pricecategory($PriceCategoryId);
        if ($pricecategory) {
            $this->response($pricecategory, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        } else {
            $this->response([
                'status' => false,
                'message' => 'No price category were found',
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }

    }
    public function pricecategory_post()
    {
        // Add a new pricecategory

        $add_data = array(
            'PriceCategoryId' => $this->post('PriceCategoryId'),
            'PriceCatPerecent' => $this->post('PriceCatPerecent'),
        );
        $this->Pricecategory_mdl->add_pricecategory($add_data);
        $message = [
            'PriceCategoryId' => $this->post('PriceCategoryId'), // Automatically generated by the model
            'PriceCatPerecent' => $this->post('PriceCatPerecent'),
            'message' => 'Added a resource',
        ];
        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function pricecategory_put()
    {
        // Update the pricecategory

        $PriceCategoryId = $this->put('PriceCategoryId');
        $update_data = array(
            'PriceCatPerecent' => $this->put('PriceCatPerecent'),
        );
        $this->Pricecategory_mdl->update_pricecategory($PriceCategoryId, $update_data);
        $message = [
            'PriceCategoryId' => $PriceCategoryId, // Automatically generated by the model
            'PriceCatPerecent' => $this->put('PriceCatPerecent'),
            'message' => 'Updates a pricecategory ',
        ];
        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function pricecategory_delete()
    {

        $PriceCategoryId = $this->get('PriceCategoryId');
        if ($PriceCategoryId <= 0) {
            $this->response(null, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }
        $test = $this->Pricecategory_mdl->get_pricecategory($PriceCategoryId);
        if (!empty($test[0]['PriceCategoryId'])) {
            $this->Pricecategory_mdl->delete_pricecategory($PriceCategoryId);
            $message = [
                'PriceCategoryId' => $PriceCategoryId,
                'message' => 'Deleted the resource',
            ];
            $this->set_response($message, REST_Controller::HTTP_OK);
        } else {
            $message = "Error";
            $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
        }
    }

}
