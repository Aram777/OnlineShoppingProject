<?php

defined('BASEPATH') or exit('No direct script access allowed');

require APPPATH . 'libraries/REST_Controller.php';

class Productscategory_ctl extends REST_Controller
{

    public function __construct()
    {
        // Construct the parent class
        parent::__construct();

        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['productscategory_get']['limit'] = 500; // 500 requests per hour per user/key
        $this->methods['productscategory_post']['limit'] = 100; // 100 requests per hour per user/key
        $this->methods['productscategory_delete']['limit'] = 50; // 50 requests per hour per user/key
        $this->load->model('Productscategory_mdl');
    }
    public function productscategory_get()
    {
      $productscategory=$this->Productscategory_mdl->get_productscategory();


          if ($productscategory)
          {
              // Set the response and exit
              $this->response($productscategory, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
          }
          else
          {
              // Set the response and exit
              $this->response([
                  'status' => FALSE,
                  'message' => 'No users were found'
              ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
          }
      }


    public function productscategory_post()
    {
      $add_data=array(

        'PRDCATDESCRIPTION'=>$this->post('PRDCATDESCRIPTION')
        );
      $this->Productscategory_mdl->add_productscategory($add_data);
      $message = [

          'PRDCATDESCRIPTION' => $this->post('PRDCATDESCRIPTION'),
          'message' => 'Added a resource'
      ];
      $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
  }

    public function productscategory_put()
    {
      // Update the pricecategory
       $PRODUCTSCATEGORYID=$this->put('PRODUCTSCATEGORYID');
       $update_data=array(
         'PRDCATDESCRIPTION'=>$this->put('PRDCATDESCRIPTION')
       );
       $this->Productscategory_mdl->update_productscategory($PRODUCTSCATEGORYID, $update_data);
       $message = [
           'PRODUCTSCATEGORYID' => $this->put('PRODUCTSCATEGORYID'), // Automatically generated by the model
           'PRDCATDESCRIPTION' => $this->put('PRDCATDESCRIPTION'),
           'message' => 'Updates a productscategory'
       ];
       $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) bei
    }
    public function productscategory_delete()
    {
      $PRODUCTSCATEGORYID = (int) $this->get('PRODUCTSCATEGORYID');
        // Validate the id.
        if ($PRODUCTSCATEGORYID <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }
        // $this->some_model->delete_something($PRICECATEGORYID);
        //check if the price exists
        $test=$this->Productscategory_mdl->get_productscategory($PRODUCTSCATEGORYID);
        if(!empty($test[0]['PRODUCTSCATEGORYID'])) {
          $this->Productscategory_mdl->delete_productscategory($PRODUCTSCATEGORYID);
          $message = [
              'PRODUCTSCATEGORYID' =>$PRODUCTSCATEGORYID,
              'message' => 'Deleted the resource'
          ];
          $this->set_response($message, REST_Controller::HTTP_OK);
        }
        else {
          $message="Error";
          $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (
    }
}
}
