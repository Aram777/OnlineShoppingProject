<?php

defined('BASEPATH') or exit('No direct script access allowed');

require APPPATH . 'libraries/REST_Controller.php';

class Productscategory_ctl extends REST_Controller
{

    public function __construct()
    {
        // Construct the parent class
        parent::__construct();

        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['productscategory_get']['limit'] = 500; // 500 requests per hour per user/key
        $this->methods['productscategory_post']['limit'] = 100; // 100 requests per hour per user/key
        $this->methods['productscategory_delete']['limit'] = 50; // 50 requests per hour per user/key
        $this->load->model('Productscategory_mdl');
    }
    public function productscategory_get()
    {
      $productscategory=$this->Productscategory_mdl->get_productscategory();

      $ProductsCategoryId = $this->get('ProductsCategoryId');

      // If the id parameter doesn't exist return all the users

      if ($ProductsCategoryId === NULL)
      {
          // Check if the users data store contains users (in case the database result returns NULL)
          if ($productscategory)
          {
              // Set the response and exit
              $this->response($productscategory, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
          }
          else
          {
              // Set the response and exit
              $this->response([
                  'status' => FALSE,
                  'message' => 'No users were found'
              ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
          }
      }

      // Find and return a single record for a particular user.

      $ProductsCategoryId = (int) $ProductsCategoryId;

      // Validate the id.
      if ($ProductsCategoryId <= 0)
      {
          // Invalid id, set the response and exit.
          $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
      }

      // Get the user from the array, using the id as key for retrieval.
      // Usually a model is to be used for this.

      $productcategory = NULL;

      if (!empty($productscategory))
      {
          //Get the user from database
          $productcategory=$this->Productscategory_mdl->get_productcategory($ProductsCategoryId);
      }

      if (!empty($productcategory))
      {
          $this->set_response($productcategory, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
      }
      else
      {
          $this->set_response([
              'status' => FALSE,
              'message' => 'product category could not be found'
          ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
      }

  }


    public function productscategory_post()
    {
      $add_data=array(

        'PrdCatDescription'=>$this->post('PrdCatDescription')
        );
      $this->Productscategory_mdl->add_productscategory($add_data);
      $message = [

          'PrdCatDescription' => $this->post('PrdCatDescription'),
          'message' => 'Added a resource'
      ];
      $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
  }

    public function productscategory_put()
    {
      // Update the pricecategory
       $ProductsCategoryId=$this->put('ProductsCategoryId');
       $update_data=array(
         'PrdCatDescription'=>$this->put('PrdCatDescription')
       );
       $this->Productscategory_mdl->update_productscategory($ProductsCategoryId, $update_data);
       $message = [
           'ProductsCategoryId' => $this->put('ProductsCategoryId'), // Automatically generated by the model
           'PrdCatDescription' => $this->put('PrdCatDescription'),
           'message' => 'Updates a productscategory',
       ];
       $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) bei
    }
    public function productscategory_delete()
    {
      $ProductsCategoryId = (int) $this->get('ProductsCategoryId');
        // Validate the id.
        if ($ProductsCategoryId <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }
        // $this->some_model->delete_something($PRICECATEGORYID);
        //check if the price exists
        $test=$this->Productscategory_mdl->get_productscategory($ProductsCategoryId);
        if(!empty($test[0]['ProductsCategoryId'])) {
          $this->Productscategory_mdl->delete_productscategory($ProductsCategoryId);
          $message = [
              'ProductsCategoryId' =>$ProductsCategoryId,
              'message' => 'Deleted the resource'
          ];
          $this->set_response($message, REST_Controller::HTTP_OK);
        }
        else {
          $message="Error";
          $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (
    }
}
}
